// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: WebServices.proto

package WebServices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	Echo "service/protos/Echo"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoServicesClient is the client API for EchoServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServicesClient interface {
	Echo(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error)
}

type echoServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServicesClient(cc grpc.ClientConnInterface) EchoServicesClient {
	return &echoServicesClient{cc}
}

func (c *echoServicesClient) Echo(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error) {
	out := new(Echo.EchoReply)
	err := c.cc.Invoke(ctx, "/WebServices.EchoServices/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServicesServer is the server API for EchoServices service.
// All implementations must embed UnimplementedEchoServicesServer
// for forward compatibility
type EchoServicesServer interface {
	Echo(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error)
	mustEmbedUnimplementedEchoServicesServer()
}

// UnimplementedEchoServicesServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServicesServer struct {
}

func (UnimplementedEchoServicesServer) Echo(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServicesServer) mustEmbedUnimplementedEchoServicesServer() {}

// UnsafeEchoServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServicesServer will
// result in compilation errors.
type UnsafeEchoServicesServer interface {
	mustEmbedUnimplementedEchoServicesServer()
}

func RegisterEchoServicesServer(s grpc.ServiceRegistrar, srv EchoServicesServer) {
	s.RegisterService(&EchoServices_ServiceDesc, srv)
}

func _EchoServices_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServicesServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.EchoServices/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServicesServer).Echo(ctx, req.(*Echo.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EchoServices_ServiceDesc is the grpc.ServiceDesc for EchoServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.EchoServices",
	HandlerType: (*EchoServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoServices_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}
